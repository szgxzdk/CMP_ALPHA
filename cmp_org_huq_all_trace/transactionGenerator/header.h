#include "misc.h"
#include "host.h"


#define MAX_SIM_NODE		256
#define MAXTHREADS		16
#define WAIT_TIME		200000000

#define MISS_READ		3
#define MISS_WRITE		4
#define WRITE_UPDATE		5	
#define WRITE_BACK		6
#define UPDATE_DIR		7

#define INV_MSG_READ		8
#define INV_MSG_WRITE		9

#define ACK_MSG_READ		10			
#define ACK_MSG_READUPDATE	11			
#define ACK_MSG_WRITE		12
#define ACK_MSG_WRITEUPDATE	13

#define ACK_DIR_READ_SHARED	15
#define ACK_DIR_READ_EXCLUSIVE	16
#define ACK_DIR_WRITE		17
#define ACK_DIR_WRITEUPDATE	18

#define WAIT_MEM_READ		19
#define L2_PREFETCH		20
/* Dir information */
#define DIR_STABLE		1
#define DIR_TRANSITION		2
#define INV_TYPE		3
#define REPL_TYPE		4
/* Network packet size */
#define META_PACKET		1
#define DATA_PACKET		5

#define OPTICAL_INTERCONNECT
//#define POPNET

counter_t msgno;
counter_t sim_cycle;
unsigned long long int sharers;
struct TRANS_EVENT{
int Threadid;
int src1;	/* source */
int src2;	/* source */
int des1;	/* destination */
int des2;	/* destination */
counter_t start_cycle;	/* event start time */
counter_t msgno;	/* event number which is id for each event and network transaction */
int operation;		/* operation type */
counter_t when;		/* finish time */
int parent_operation;
int childcount;
struct TRANS_EVENT *next;	
struct TRANS_EVENT *parent;	
counter_t missno;
};

counter_t MissNo;
/* Event FIFO implementation */
#define DIR_FIFO_PORTS	2
#define DIR_FIFO_SIZE	4096
#define dir_fifo_size	32

struct TRANS_EVENT *dir_fifo[MAXTHREADS][DIR_FIFO_SIZE];
int dir_fifo_head[MAXTHREADS];
int dir_fifo_tail[MAXTHREADS];
int dir_fifo_num[MAXTHREADS];
int dir_fifo_portuse[MAXTHREADS];


struct TRANS_EVENT *l1_fifo[MAXTHREADS][DIR_FIFO_SIZE];
int l1_fifo_head[MAXTHREADS];
int l1_fifo_tail[MAXTHREADS];
int l1_fifo_num[MAXTHREADS];
int l1_fifo_portuse[MAXTHREADS];

void reset_ports();
int dir_fifo_enqueue(struct TRANS_EVENT *event, int type);
void dir_fifo_dequeue();

struct TRANS_EVENT *event_queue;	/* central event queue */

int mshr_entry[MAXTHREADS];

/* statistics */
counter_t totalHopCount;
counter_t totalHopDelay;
counter_t total_read_misses;
counter_t total_write_misses;
counter_t total_write_upgrades;
counter_t total_meta_packets;
counter_t total_data_packets;


/* application parameters reading from the profile*/

/* basic configurations */
int total_num_node;		/* total number of node */
int mesh_size;
int cache_dl2_lat;
int cache_il1_lat;
int cache_dl1_lat;
int mem_lat;

int mshr_size;
int meta_packet_size;
int data_packet_size;

counter_t total_cycles;		/* total cycles of application running */

/* requests generated by sender */
float read_miss; 		/* miss read request generate rate per cycle */

float write_miss;		/* miss write request generate rate per cycle */

float write_upgrade;		/* write upgrade generate rate per cycle */

float L2_missrate;

/* read transaction */
float read_direct_reply;	/* miss read directly reply */

float forward_request;		/* probability of directory forwarding the request to remote node */

float modified_downgrade;	/* after the directory forward the request to remote node, the remote node has the modified state(for downgrade) */

float modified_invalidation;	/* after the directory forward the request to remote node, the remote node has the modified state(for invalidation) */

float exclusive_downgrade;	/* after the directory forward the request to remote node, the remote node has the exclusive state */

/* write transaction */
float write_direct_reply;	/* miss write directly reply*/

float invalidation[MAX_SIM_NODE];

float invalidate_others;	/* probability of invalidate the others */

float invalidation_one;		/* invalidation involves one remote node*/

float invalidation_two;		/* invalidation involves two remote node*/

float invalidation_three;		/* invalidation involves three remote node */

float invalidation_four;		/* invalidation involves four remote node */

float invalidation_five;		/* invalidation involves five remote node */

float invalidation_six;		/* invalidation involves six remote node */

float invalidation_seven;		/* invalidation involves seven remote node */

float invalidation_eight;		/* invalidation involves eight remote node */

float invalidation_nine;		/* invalidation involvese nice remote node */

float invalidation_ten;		/* invalidation involves ten remote node */

float invalidation_eleven;		/* invalidation involves eleven remote node */

float invalidation_twelve;		/* invalidation involves twelve remote node */

float invalidation_thirteen;		/* invalidation involves thirteen remote node */

float invalidation_fourteen;		/* invalidation involves fourteen remote node */

float invalidation_fifteen;		/* invalidation involves fifteen remote node */

float modified_invalid;			/* after remote received the invalidation, the cache line state in remote is modified */


int MsgComplete(int w, int x, int y, int z, counter_t stTime, counter_t msgNo, counter_t transfer_time, counter_t meta_delay);
int generator(float probability);
void schedule_network(struct TRANS_EVENT *event, int packet_type, counter_t sim_cycle);
void eventq_insert(struct TRANS_EVENT *event);   
void event_create(int packet_type, int operation, int threadid);
int compare(int t, int i, int *r);
unsigned long long int sharers_generator(int src);
int src_gen();
int des_gen(int src);
void transaction_start(counter_t sim_cycle);
int event_operation(struct TRANS_EVENT *event);
int MsgComplete(int w, int x, int y, int z, counter_t stTime, counter_t msgNo, counter_t transfer_time, counter_t meta_delay);
void dir_eventq_nextevent(void);              
void reset_ports();
void assign_value();
